datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Roles for users
enum Role {
  PATIENT
  DENTIST
}

/// Status for appointments
enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

/// NextAuth account model
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// NextAuth session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// NextAuth email sign-in tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Central user table for authentication
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  name       String?
  role       Role
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // One-to-one profiles
  patient   Patient?  @relation
  dentist   Dentist?  @relation

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]
}

/// Profile data for patients
model Patient {
  id         String       @id @default(uuid())
  phone      String?
  dob        DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Link back to User
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique

  // Appointments booked by this patient
  appointments Appointment[]
}

/// Profile data for dentists
model Dentist {
  id                      String       @id @default(uuid())
  specialty               String
  phone                   String?
  isAvailableForEmergency Boolean      @default(false)
  profileImageUrl         String?
  bio                     String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  // Link back to User
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique

  // Appointments assigned to this dentist
  appointments Appointment[]
}

/// Services that can be booked
model Service {
  id              String        @id @default(uuid())
  name            String        @unique
  description     String?
  durationMinutes Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  appointments    Appointment[]
}

/// Booked appointments linking patients, dentists, and services
model Appointment {
  id          String            @id @default(uuid())
  date        DateTime
  time        String            // e.g., "10:00 AM"
  notes       String?
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  patient     Patient           @relation(fields: [patientId], references: [id])
  patientId   String

  dentist     Dentist           @relation(fields: [dentistId], references: [id])
  dentistId   String

  service     Service           @relation(fields: [serviceId], references: [id])
  serviceId   String
}
