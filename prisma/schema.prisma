datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Roles for users
enum Role {
  PATIENT
  DENTIST
}

/// Status for appointments
enum AppointmentStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

/// Status for emergencies
enum EmergencyStatus {
  PENDING
  APPROVED
  CANCELLED
  FINISHED
}

/// NextAuth account model
model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// NextAuth session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// NextAuth email sign-in tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Central user table for authentication
model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  name       String?
  role       Role
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // One-to-one profiles
  patient   Patient?  @relation
  dentist   Dentist?  @relation

  // NextAuth relations
  accounts  Account[]
  sessions  Session[]

  // Notifications
  notifications Notification[]

  fcmToken   String?   // Token de notificaciones push
  pushEmergencies Boolean @default(true) // Notificaciones push de emergencias
  pushAppointments Boolean @default(true) // Notificaciones push de citas
  pushStatusChanges Boolean @default(true) // Notificaciones push de cambios de estado
  locale     String    @default("es") // Idioma preferido del usuario
}

/// Profile data for patients
model Patient {
  id         String       @id @default(uuid())
  dni        String       @unique
  phone      String?
  dateOfBirth DateTime
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Link back to User
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique

  // Appointments booked by this patient
  appointments Appointment[]
  emergencies  Emergency[]
}

/// Profile data for dentists
model Dentist {
  id                      String       @id @default(uuid())
  specialty               String
  phone                   String?
  isAvailableForEmergency Boolean      @default(false)
  profileImageUrl         String?
  bio                     String?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt

  // Link back to User
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique

  // Appointments assigned to this dentist
  appointments Appointment[]
  emergencies  Emergency[]
}

/// Booked appointments linking patients, dentists, and services
model Appointment {
  id          String            @id @default(uuid())
  date        DateTime
  time        String            // e.g., "10:00 AM"
  notes       String?
  status      AppointmentStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  durationMinutes Int           // Duración en minutos (ej: 15, 30, 45, 60, 90)

  patient     Patient           @relation(fields: [patientId], references: [id])
  patientId   String

  dentist     Dentist           @relation(fields: [dentistId], references: [id])
  dentistId   String

  serviceName String            // Nuevo campo para el nombre del servicio
}

/// Notification system
model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String   // e.g. 'INFO', 'EMERGENCY', 'APPOINTMENT', etc
  title     String
  message   String
  link      String?  // Optional: link to related resource
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     String? // 'emergency', 'appointment', etc
}

model Emergency {
  id          String         @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      EmergencyStatus @default(PENDING)
  description String
  name        String
  phone       String
  dni         String
  notified    Boolean        @default(false)

  // Relación opcional con paciente registrado
  patient     Patient?       @relation(fields: [patientId], references: [id])
  patientId   String?

  // Relación opcional con dentista asignado
  dentist     Dentist?       @relation(fields: [dentistId], references: [id])
  dentistId   String?
}
